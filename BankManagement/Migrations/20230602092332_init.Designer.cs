// <auto-generated />
using System;
using BankManagement.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankManagement.Migrations
{
    [DbContext(typeof(BankContext))]
    [Migration("20230602092332_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BankManagement.Infrastructure.Models.BankCustomer.BankAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("BankManagement.Infrastructure.Models.BankCustomer.BankCustomer1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BankAddressId")
                        .HasColumnType("int");

                    b.Property<int>("BankCustomerNextOfKinId")
                        .HasColumnType("int");

                    b.Property<int>("BankNumber")
                        .HasColumnType("int");

                    b.Property<int>("Credit")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<int>("Debit")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankAddressId")
                        .IsUnique();

                    b.HasIndex("BankCustomerNextOfKinId")
                        .IsUnique();

                    b.ToTable("BankCustomers");
                });

            modelBuilder.Entity("BankManagement.Infrastructure.Models.BankCustomer.BankCustomerNextOfKin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BankLoanId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NextOfKins");
                });

            modelBuilder.Entity("BankManagement.Infrastructure.Models.BankCustomer.BankLoan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AmountRequested")
                        .HasColumnType("int");

                    b.Property<int>("BankAccount")
                        .HasColumnType("int");

                    b.Property<int>("BankCustomerNextOfKinId")
                        .HasColumnType("int");

                    b.Property<int>("BankDeposit")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InterestOnLoan")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccountViable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RepaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BankCustomerNextOfKinId")
                        .IsUnique();

                    b.ToTable("BankLoan");
                });

            modelBuilder.Entity("BankManagement.Infrastructure.Models.BankCustomer.Fees.BankFees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BankCharges")
                        .HasColumnType("int");

                    b.Property<int>("CheckingCommissiion")
                        .HasColumnType("int");

                    b.Property<int>("CheckingFees")
                        .HasColumnType("int");

                    b.Property<int>("CurrentCommissiion")
                        .HasColumnType("int");

                    b.Property<int>("CurrentFees")
                        .HasColumnType("int");

                    b.Property<int>("DepositCommission")
                        .HasColumnType("int");

                    b.Property<int>("DepositFees")
                        .HasColumnType("int");

                    b.Property<int>("SavingsCommission")
                        .HasColumnType("int");

                    b.Property<int>("SavingsFees")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BankFees");
                });

            modelBuilder.Entity("BankManagement.Infrastructure.Models.BankEmployee.BankEmployee1", b =>
                {
                    b.Property<int>("BankEmployee1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankEmployee1Id"), 1L, 1);

                    b.Property<DateTime>("DateEmployed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePromoted")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeDepartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BankEmployee1Id");

                    b.ToTable("BankEmployees");
                });

            modelBuilder.Entity("BankManagement.Infrastructure.Models.BankEmployee.BankEmployeeSalary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnualSalary")
                        .HasColumnType("int");

                    b.Property<int>("BankEmployee1Id")
                        .HasColumnType("int");

                    b.Property<int>("GrossPay")
                        .HasColumnType("int");

                    b.Property<int>("MonthlySalary")
                        .HasColumnType("int");

                    b.Property<int>("TaxPayable")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankEmployee1Id")
                        .IsUnique();

                    b.ToTable("EmployeeSalaries");
                });

            modelBuilder.Entity("BankManagement.Infrastructure.Models.Logs.BankLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AmountDeposited")
                        .HasColumnType("int");

                    b.Property<int>("AmountWithdrawn")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDeposited")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateWithdrawn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Depositorname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BankLogs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BankManagement.Infrastructure.Models.BankCustomer.BankCustomer1", b =>
                {
                    b.HasOne("BankManagement.Infrastructure.Models.BankCustomer.BankAddress", "BankAddress")
                        .WithOne("BankCustomer1")
                        .HasForeignKey("BankManagement.Infrastructure.Models.BankCustomer.BankCustomer1", "BankAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankManagement.Infrastructure.Models.BankCustomer.BankCustomerNextOfKin", "BankCustomerNextOfKin")
                        .WithOne("BankCustomer1")
                        .HasForeignKey("BankManagement.Infrastructure.Models.BankCustomer.BankCustomer1", "BankCustomerNextOfKinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAddress");

                    b.Navigation("BankCustomerNextOfKin");
                });

            modelBuilder.Entity("BankManagement.Infrastructure.Models.BankCustomer.BankLoan", b =>
                {
                    b.HasOne("BankManagement.Infrastructure.Models.BankCustomer.BankCustomerNextOfKin", "BankCustomerNextOfKin")
                        .WithOne("BankLoan")
                        .HasForeignKey("BankManagement.Infrastructure.Models.BankCustomer.BankLoan", "BankCustomerNextOfKinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankCustomerNextOfKin");
                });

            modelBuilder.Entity("BankManagement.Infrastructure.Models.BankEmployee.BankEmployeeSalary", b =>
                {
                    b.HasOne("BankManagement.Infrastructure.Models.BankEmployee.BankEmployee1", "BankEmployee1")
                        .WithOne("BankEmployeeSalary")
                        .HasForeignKey("BankManagement.Infrastructure.Models.BankEmployee.BankEmployeeSalary", "BankEmployee1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankEmployee1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankManagement.Infrastructure.Models.BankCustomer.BankAddress", b =>
                {
                    b.Navigation("BankCustomer1")
                        .IsRequired();
                });

            modelBuilder.Entity("BankManagement.Infrastructure.Models.BankCustomer.BankCustomerNextOfKin", b =>
                {
                    b.Navigation("BankCustomer1")
                        .IsRequired();

                    b.Navigation("BankLoan")
                        .IsRequired();
                });

            modelBuilder.Entity("BankManagement.Infrastructure.Models.BankEmployee.BankEmployee1", b =>
                {
                    b.Navigation("BankEmployeeSalary")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
